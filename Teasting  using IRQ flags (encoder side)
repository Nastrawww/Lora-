# Lora-
Tested codes 

/*
  LoRa Simple Gateway/Node Exemple
  This code uses InvertIQ function to create a simple Gateway/Node logic.
  Gateway - Sends messages with enableInvertIQ()
          - Receives messages with disableInvertIQ()
  Node    - Sends messages with disableInvertIQ()
          - Receives messages with enableInvertIQ()
  With this arrangement a Gateway never receive messages from another Gateway
  and a Node never receive message from another Node.
  Only Gateway to Node and vice versa.
  This code receives messages and sends a message every second.
  InvertIQ function basically invert the LoRa I and Q signals.
  See the Semtech datasheet, http://www.semtech.com/images/datasheet/sx1276.pdf
  for more on InvertIQ register 0x33.
  created 05 August 2018
  by Luiz H. Cassettari
*/

#include <SPI.h>              // include libraries
#include <LoRa.h>
#define ss 10
#define rst 9
#define dio0 2
const int irqPin = 3;          // change for your board; must be a hardware interrupt pin
int CLK = 8;  // Pin 9 to clk on encoder
int DT = 7;  // Pin 8 to DT on encoder
int RotPosition = 0; 
int rotation;  
int value;
boolean LeftRight;
String outgoing;
byte msgCount = 0;            // count of outgoing messages
byte destination = 0xCC;     
byte localAddress = 0xbb;
long lastSendTime=0;
long interval=200;
void setup() {
  Serial.begin(9600);                   // initialize serial
  pinMode (CLK,INPUT);
  pinMode (DT,INPUT);
  rotation = digitalRead(CLK);
  while (!Serial);
  LoRa.setPins(ss, rst, irqPin);

  if (!LoRa.begin(433E6)) {
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }
  LoRa.setSpreadingFactor(7);
  LoRa.setCodingRate(4);
  //LoRa.onReceive(onReceive);
  //LoRa.onTxDone(onTxDone);
Serial.println("LoRa init succeeded.");
}


void loop() {
  if (millis() >interval) { 
    encoder();
    String message = String(analogRead(RotPosition));
    sendMessage(message); // send a message
    lastSendTime =millis();
    interval =random(50)+100;
  }
  onReceive(LoRa.parsePacket());
  delay(2000);
}

void LoRa_rxMode(){
  LoRa.enableInvertIQ();                // active invert I and Q signals
  LoRa.receive();                       // set receive mode
}

void LoRa_txMode(){
  LoRa.idle();                          // set standby mode
  LoRa.disableInvertIQ();               // normal mode
}

void sendMessage(String outgoing) {
  LoRa_txMode();                        // set tx mode
  LoRa.beginPacket();                   // start packet
  LoRa.write(destination);              // add destination address
  LoRa.write(localAddress);             // add sender address
  LoRa.write(msgCount);                 // add message ID
  LoRa.write(outgoing.length());        // add payload length
  LoRa.print(outgoing);                 // add payload
  LoRa.endPacket(true);                 // finish packet and send it
  msgCount++;                           // increment message id
}

void onReceive(int packetSize) {
  LoRa_rxMode();
  if (packetSize == 0)           // if there's no packet, return
  {
    // Serial.print("Received nothing");
     return;
  }

  int recipient = LoRa.read();          // recipient address
  byte sender = LoRa.read();            // sender address
  byte incomingMsgId = LoRa.read();     // incoming msg ID
  byte incomingLength = LoRa.read();    // incoming msg length
  //Serial.print("Received packet:  ");
  String incoming="";
  while (LoRa.available()) {
    incoming += (char)LoRa.read();
  }
  Serial.print("Incoming Message:");
  Serial.print(incoming);
  Serial.print(" RSSI  ");
  Serial.println(LoRa.packetRssi());
  Serial.println();
}

int encoder()
{
  value = digitalRead(CLK);  //ENCODER
   if (value != rotation)
     { // we use the DT pin to find out which way we turning.  
        if (digitalRead(DT) != value) 
        {  // Clockwise
           RotPosition ++;
           LeftRight = true;
        }
        else
        { //Counterclockwise
           LeftRight = false;
           RotPosition--;
        }
        if (LeftRight)
        { 
           Serial.println ("clockwise");
        }
        else
        {          
           Serial.println("counterclockwise");
        }
     Serial.print("Encoder RotPosition: ");
     Serial.println(RotPosition);
   } 
   rotation = value;
   return RotPosition;
}



